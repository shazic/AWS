################################################################################
# Define the CloudFormation Template Version and a short description.
################################################################################
AWSTemplateFormatVersion: "2010-09-09"

Description: Creating a simple CI/CD Pipeline for a Kubernetes cluster with AWS CodePipeline.

################################################################################
# Define the AWS Resources.
################################################################################
Resources:

  ECRRepository:
    Description: ECR Repository for the docker images.
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ContainerRepository

  CodeRepository:
    Description: Code repository for the pipeline.
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Ref CodeRepositoryDescription
      RepositoryName: !Ref CodeRepositoryName

  CloudWatchEventsCanInvokePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchEventsRolePolicy
      Roles:
        - !Ref CodePipelineEventsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - codepipeline:*

  CodePipelineEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CloudWatchEventsRuleForCodeCommit:
    Type: AWS::Events::Rule
    Properties:
      Description: Role to Invoke Pipeline when CodeCommit state changes
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !Ref CodeRepository
        detail:
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
          Id: Id123
          RoleArn: !GetAtt CodePipelineEventsRole.Arn

  ServiceRoleForCodeBuild:
    Description: CodeBuild would need this service role to do its job.
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactStore}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodeBuildProject:
    Description: AWS CodeBuild project to build the Source Code
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref BuildProjectName
      Description: !Ref BuildProjectDescription
      Artifacts:
        Location: !Ref CodePipelineArtifactStore
        Type: "S3"
      Source:
        Location: !Sub ${CodePipelineArtifactStore}/source.zip
        Type: "S3"
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
            build:
              commands:
                - docker build --tag "${REPOSITORY_URI}:${TAG}" .
            post_build:
              commands:
                - docker push "${REPOSITORY_URI}:${TAG}"
                - printf '{"tag":"%s","repository-uri":"%s","template-bucket":"%s","deployment-name":"%s","cluster-endpoint":"%s"}' $TAG $REPOSITORY_URI $TEMPLATE_BUCKET $DEPLOYMENT_NAME $CLUSTER_ENDPOINT > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
          - Name: TEMPLATE_BUCKET
            Value: !Ref LambdaCodeLocation
          - Name: DEPLOYMENT_NAME
            Value: !Ref DeploymentName
          - Name: CLUSTER_ENDPOINT
            Value: !Ref ClusterEndpoint
      Name: !Ref AWS::StackName
      ServiceRole: !Ref ServiceRoleForCodeBuild
      Tags:
      - Key: Name
        Value: !Ref BuildProjectName

  LambdaCodePipelineExecutionPolicy:
    Description: Policy for Lambda to be able todo it's function properly
    Type: AWS::IAM::Policy
    DependsOn: ServiceRoleForLambda
    Properties:
      PolicyName: LambdaRolePolicy
      Roles:
        - !Ref 'ServiceRoleForLambda'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:Describe*
              - ssm:Get*
            Resource:
              -  '*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - logs:*
            Resource:
              - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${CodePipelineArtifactStore}/*
              - !Sub arn:aws:s3:::${LambdaCodeLocation}/*

  ServiceRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  LambdaFunctionForK8sDeployment:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaCodePipelineExecutionPolicy
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeLocation
        S3Key: !Ref LambdaFunctionFilename
      Role: !GetAtt 'ServiceRoleForLambda.Arn'
      Description: Deploy on Kubernetes Cluster
      Timeout: 20
      Handler: kube-lambda.lambda_handler
      Runtime: python3.6
      MemorySize: 128

  CodePipelineArtifactStore:
    Description: An S3 bucket to serve as an artifact store for the AWS CodePipeline
    Type: AWS::S3::Bucket

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ServiceRoleForCodePipeline.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: ApplicationSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt CodeRepository.Name
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: CodeCommitArtifacts
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: CodeCommitArtifacts
              OutputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deployment
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref LambdaFunctionForK8sDeployment
              InputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1

  ServiceRoleForCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${CodePipelineArtifactStore}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - codecommit:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  SNSTopicForPipelineNotifications:
    Description: SNS Topic for Pipeline Event notifications.
    Type: AWS::SNS::Topic

  SNSTopicSubscription:
    Description: Create a subscription to the SNS topic. The user has to confirm the subscription.
    Type: AWS::SNS::Subscription    
    Properties:
      TopicArn: !Ref SNSTopicForPipelineNotifications
      Protocol: email
      Endpoint: !Ref Email

  SNSTopicPolicyForCWEvents:
    Description: SNS topic policy to let CloudWatch Events send notifications to the topic.
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPolicyForCWE
        Version: '2012-10-17'
        Statement:
        - Sid: TrustCWEToPublishEventsToMyTopic
          Effect: Allow
          Principal:
            Service: "events.amazonaws.com"
          Action: sns:Publish
          Resource: !Sub "${SNSTopicForPipelineNotifications}"
      Topics:
      - !Ref SNSTopicForPipelineNotifications

  CloudWatchEventsRuleForUserNotifications:
    Description: CloudWatch Events Rule to catch the Pipeline events (status changes)    
    Type: AWS::Events::Rule
    Properties:
      EventPattern: 
        source: 
        - "aws.codepipeline"
        detail-type: 
        - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "STARTED"
            - "SUCCEEDED"
            - "FAILED"
      State: "ENABLED"
      Targets:
        - Arn: !Ref SNSTopicForPipelineNotifications
          Id: "SNSTargetForPipelineEvents"

################################################################################
# Define the Input Parameters.
################################################################################
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:

      - Label:
          default: "Code Repository"
        Parameters:
          - CodeRepositoryName
          - BranchName
          - CodeRepositoryDescription
          - ContainerRepository

      - Label:
          default: "Build Project Details"
        Parameters:
          - BuildProjectName
          - BuildProjectDescription

      - Label:
          default: "Build Environment"
        Parameters:          
          - ComputeType
          - BuildEnvironmentImage
          - DeploymentName
          - ClusterEndpoint

      - Label:
          default: "Lambda Function for code deployment"
        Parameters:
          - LambdaCodeLocation
          - LambdaFunctionFilename

      - Label:
          default: "E-mail to subscribe for pipeline change events"
        Parameters:
          - Email          

Parameters:

  CodeRepositoryName: 
    Description: A name for the AWS CodeCommit repository
    Type: String
    Default: CodeRepositoryName
    MinLength: 3
    MaxLength: 20
    ConstraintDescription: Must be between 3 and 20 characters.

  BranchName:
    Description: Branch name
    Type: String
    Default: master
    MinLength: 3
    MaxLength: 20
    ConstraintDescription: Must be between 3 and 20 characters.

  CodeRepositoryDescription: 
    Description: A short description for the AWS CodeCommit repository
    Type: String
    Default: "A short description for the repository"
    MinLength: 3
    MaxLength: 200
    ConstraintDescription: Must be between 3 and 200 characters.    

  ContainerRepository:
    Description: A name for the ECR repository.
    Type: String
    Default: ecr-repository
    MinLength: 3
    MaxLength: 20
    ConstraintDescription: Must be between 3 and 20 characters.

  BuildProjectName:
    Description: Name of the build project
    Type: String
    Default: DemoCodeBuildProject
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 

  BuildProjectDescription:
    Description: A short description of the build project, within 200 characters.
    Type: String
    Default: "A short description for the build project"
    MaxLength: 200
    ConstraintDescription: Must be less than 200 characters in length. 

  ComputeType:
    Description: Compute environment for build
    Type: String
    Default: SMALL
    AllowedValues:
    - SMALL
    - MEDIUM
    - LARGE
    ConstraintDescription: Compute environment small, medium or large

  BuildEnvironmentImage:
    Description: Select the run-time environment for the build. Currently, only Ubuntu Linux environment available for this selection.
    Type: String
    Default: aws/codebuild/java:openjdk-8
    AllowedValues:
    - aws/codebuild/java:openjdk-8
    - aws/codebuild/java:openjdk-9
    - aws/codebuild/nodejs:10.1.0
    - aws/codebuild/nodejs:8.11.0
    - aws/codebuild/nodejs:6.3.1
    - aws/codebuild/php:5.6
    - aws/codebuild/php:7.0
    - aws/codebuild/python:3.6.5
    - aws/codebuild/python:3.5.2
    - aws/codebuild/python:3.4.5
    - aws/codebuild/python:3.3.6
    - aws/codebuild/python:2.7.12
    - aws/codebuild/ruby:2.5.1
    - aws/codebuild/ruby:2.3.1
    - aws/codebuild/ruby:2.2.5
    - aws/codebuild/golang:1.10
    - aws/codebuild/docker:17.09.0
    - aws/codebuild/android-java-8:26.1.1
    - aws/codebuild/android-java-8:24.4.1
    ConstraintDescription: Currently, only Ubuntu Linux environment available for this selection. 

  DeploymentName:
    Description: A name for the Kubernetes deployment
    Type: String
    Default: k8s-deployment

  ClusterEndpoint:
    Description: Cluster endpoint for the Kubernetes Cluster.
    Type: String

  LambdaCodeLocation:
    Description: Provide the bucket name that stores the lambda function which would deploy the images to K8s.
    Type: String
    ConstraintDescription: Should be a valid bucket name.

  LambdaFunctionFilename:
    Description: The zipped package file in the bucket.
    Type: String
    Default: Archive.zip
    MinLength: 3
    MaxLength: 20
    
  Email:
    Description: E-mail of the user who needs to be notified for pipeline state changes. The user has to confirm the subscription before receiving e-mails.
    Type: String
        
################################################################################
# Define the Outputs.
################################################################################
Outputs:

  RepositoryCloneUrlHTTP:
    Description: The URL to use for cloning the repository over HTTPS
    Value: !GetAtt CodeRepository.CloneUrlHttp

  RepositoryCloneUrlSSH:
    Description: The URL to use for cloning the repository over SSH
    Value: !GetAtt CodeRepository.CloneUrlSsh

  SNSTopic:
    Description: The arn of the SNS topic that the pipeline sends the state change notifications.
    Value: !Ref SNSTopicForPipelineNotifications

  EventRuleId:
    Description: The CloudWatch Event Rule responsible for sending pipeline state change notifications to the SNS topic.
    Value: !Ref CloudWatchEventsRuleForUserNotifications