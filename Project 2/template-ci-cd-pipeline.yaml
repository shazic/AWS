################################################################################
# Define the CloudFormation Template Version and a short description.
################################################################################
AWSTemplateFormatVersion: "2010-09-09"

Description: Creating a simple CI/CD Pipeline with AWS CodePipeline and Jenkins integration.

################################################################################
# Define the AWS Resources.
################################################################################
Resources:

  CodeCommitRepository:
    Description: A repository for the Source Code
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Ref RepositoryDescription
      RepositoryName: !Ref RepoName

  ServiceRoleForCodeBuild:
    Description: CodeBuild would need this service role to do its job.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "codebuild.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      Policies:
        - 
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}:*
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  
                Action:
                - s3:PutObject
                - s3:GetObject
                - s3:GetObjectVersion

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}
                  
                Action:
                - codecommit:GitPull

  CodeBuildProject:
    Description: AWS CodeBuild project to build the Source Code
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref BuildProjectName
      Description: !Ref BuildProjectDescription
      Artifacts: 
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Sub BUILD_GENERAL1_${ComputeType}
        Image: !Ref BuildEnvironmentImage
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt ServiceRoleForCodeBuild.Arn
      Source: 
        Type: CODEPIPELINE
      Tags:
      - Key: Name
        Value: !Ref BuildProjectName

  CodeDeployApplication:
    Description: AWS CodeDeploy Application for deploying the build artifacts.
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  DeploymentConfiguration:
    Description: Define a Deployment Configuration that deploys to 25% of the fleet at a time.
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties: 
      MinimumHealthyHosts: 
        Type: "FLEET_PERCENT"
        Value: 75      

  CodeDeploymentGroup:
    Description: Code deployment group that would deploy to a given tag
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentConfigName: !Ref DeploymentConfiguration
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle: 
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: !Ref DeploymentKeyName
          Value: !Ref DeploymentKeyValue

  CodeDeployRole:
    Description: Role with managed policy AWSCodeDeployRole 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "codedeploy.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole 

  CodePipelineArtifactStore:
    Description: An S3 bucket to serve as an artifact store for the AWS CodePipeline
    Type: AWS::S3::Bucket

  PipelineRole:
    Description: Role for AWS CodePipeline to do its job
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "codepipeline.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      Policies:
        - 
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
                
              - 
                Effect: "Allow"
                Resource: 
                  - arn:aws:s3:::codepipeline*
                Action:
                - s3:PutObject
                
              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - codecommit:CancelUploadArchive
                - codecommit:GetBranch
                - codecommit:GetCommit
                - codecommit:GetUploadArchiveStatus
                - codecommit:UploadArchive

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - codedeploy:CreateDeployment
                - codedeploy:GetApplicationRevision
                - codedeploy:GetDeployment
                - codedeploy:GetDeploymentConfig
                - codedeploy:RegisterApplicationRevision

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - ec2:*
                - elasticloadbalancing:*
                - autoscaling:*
                - cloudwatch:*
                - s3:*
                - sns:*
                - cloudformation:*
                - rds:*
                - sqs:*
                - ecs:*
                - iam:PassRole

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:DescribeStacks
                - cloudformation:UpdateStack
                - cloudformation:CreateChangeSet
                - cloudformation:DeleteChangeSet
                - cloudformation:DescribeChangeSet
                - cloudformation:ExecuteChangeSet
                - cloudformation:SetStackPolicy
                - cloudformation:ValidateTemplate
                - iam:PassRole

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                Action:
                - codebuild:BatchGetBuilds
                - codebuild:StartBuild

  CustomBuildActionWithJenkins:
    Description: Define a custom Action Type to build code with Jenkins.
    Type: AWS::CodePipeline::CustomActionType
    Properties:
      Category: Build
      Provider: !Ref JenkinsProvider
      ConfigurationProperties:
      - Name: ProjectName
        Queryable: true
        Key: true
        Required: true
        Secret: false
        Type: String
      InputArtifactDetails:
        MinimumCount: 1
        MaximumCount: 5
      OutputArtifactDetails:
        MinimumCount: 1
        MaximumCount: 5
      Settings:
        EntityUrlTemplate: 
          !Sub "http://${JenkinsServer.PublicDnsName}:8080/job/${JenkinsProject}"
        ExecutionUrlTemplate:
          !Sub "http://${JenkinsServer.PublicDnsName}:8080/job/${JenkinsProject}/lastSuccessfulBuild/{ExternalExecutionId}/"
      Version: !Ref Version

  CiCdPipeline:
    Description: AWS CodePipeline
    Type: AWS::CodePipeline::Pipeline
    DependsOn: CustomBuildActionWithJenkins
    Properties:
      Name: !Ref PipelineName
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Name: SourceRepository  
              Configuration:
                RepositoryName: !GetAtt CodeCommitRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: CodeCommitArtifacts
              RunOrder: 1
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: Custom
                Provider: !Ref JenkinsProvider
                Version: !Ref Version
              Name: Build 
              Configuration:
                ProjectName: !Ref JenkinsProject
              InputArtifacts:
                - Name: CodeCommitArtifacts
              OutputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1
        - Name: Staging
          Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Name: !Ref CodeDeploymentGroup 
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeploymentGroup
              InputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1

  VirtualPrivateCloud:
    Description: The VPC in which the Jenkins Server would be created.
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Application-VPC

  PublicSubnet:
    Description: Public Subnet in for launching the Jenkins Server
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 0
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 2
            - 8 
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-subnet  

  InternetGateway:
    Description: Internet Gateway for the VPC
    Type: AWS::EC2::InternetGateway

  AttachInternetGateway:
    Description: Attach Internet Gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      InternetGatewayId: !Ref InternetGateway

  InternetRouteTable:
    Description: A route table with a route to the Internet.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Name
        Value: Public-Route-Table

  RouteToIGW:
    Description: Defines a route to the internet in InternetRouteTable.
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref InternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicRouteTableWithPublicSubnet:
    Description: Associate InternetRouteTable to PublicSubnet, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet      
  
  JenkinsRole:
    Description: Role with wo policies - 1. AWSCodePipelineCustomActionAccess, 2. IAM policy to manage builds from Jenkins through CodeBuild on the specified repository
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "ec2.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
      Policies:
        - 
          # The following section defines an IAM policy to manage builds from Jenkins through CodeBuild on the specified repository 
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${BuildProjectName}
                Action:
                - codebuild:BatchGetBuilds
                - codebuild:BatchGetProjects
                - codebuild:StartBuild
              
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}:*
                  
                Action:
                - logs:GetLogEvents

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  
                Action:
                - s3:GetObject

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${BuildProjectName}
                  
                Action:
                - codecommit:BatchGetRepositories
                - codecommit:Get*
                - codecommit:List*
                - codecommit:CreateRepository
                - codecommit:CreateBranch
                - codecommit:DeleteBranch
                - codecommit:Put*
                - codecommit:Test*
                - codecommit:Update*
                - codecommit:GitPull
                - codecommit:GitPus

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                  
                Action:
                - sns:Publish

  JenkinsInstanceProfile:
    Description: Instance profile for the jenkins server
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref JenkinsRole

  JenkinsServer:
    Description: An ec2 instance with Jenkins installed.
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
        - !Ref SSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: Jenkins-Server
      
  JenkinsSecurityGroup:
    Description: Security Group allowing Jenkins traffic from specified IP address.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic on port 8080 from the specified IP CIDR range"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: !Ref CidrRange
          FromPort: '8080'
          IpProtocol: tcp
          ToPort: '8080'
        - CidrIp: 0.0.0.0/0
          FromPort: '8443'
          IpProtocol: tcp
          ToPort: '8443'
      Tags:
        - Key: Name
          Value: sg-jenkins
      
  SSHOnlySecurityGroup:
    Description: Security Group allowing users to securely access the instance.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH traffic"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: !Ref CidrRange
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      Tags:
        - Key: Name
          Value: sg-ssh-only

  SNSTopicForPipelineNotifications:
    Description: SNS Topic for Pipeline Event notifications.
    Type: AWS::SNS::Topic

  SNSTopicPolicyForCWEvents:
    Description: SNS topic policy to let CloudWatch Events send notifications to the topic.
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPolicyForCWE
        Version: '2012-10-17'
        Statement:
        - Sid: TrustCWEToPublishEventsToMyTopic
          Effect: Allow
          Principal:
            Service: "events.amazonaws.com"
          Action: sns:Publish
          Resource: !Sub "${SNSTopicForPipelineNotifications}"
      Topics:
      - !Ref SNSTopicForPipelineNotifications

  SNSTopicSubscription:
    Description: Create a subscription to the SNS topic. The user has to confirm the subscription.
    Type: AWS::SNS::Subscription    
    Properties:
      TopicArn: !Ref SNSTopicForPipelineNotifications
      Protocol: email
      Endpoint: !Ref Email

  CloudWatchEventRule:
    Description: CloudWatch Event Rule to catch the Pipeline events (status changes)    
    Type: AWS::Events::Rule
    Properties:
      EventPattern: 
        source: 
        - "aws.codepipeline"
        detail-type: 
        - "CodePipeline Stage Execution State Change"
        detail: 
          state: 
            - "STARTED"
            - "SUCCEEDED"
            - "FAILED"
      State: "ENABLED"
      Targets:
        - Arn: !Ref SNSTopicForPipelineNotifications
          Id: "SNSTargetForPipelineEvents"


################################################################################
# Define the Input Parameters.
################################################################################
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:

      - Label:
          default: "Pipeline"
        Parameters:
          - PipelineName
          - Version

      - Label:
          default: "Subscription"
        Parameters:
          - Email

      - Label:
          default: "Jenkins Server"
        Parameters:
          - VPCCidrBlock
          - ImageId
          - InstanceType
          - KeyName
          - CidrRange
          - JenkinsProject
          - JenkinsProvider

      - Label:
          default: "AWS CodeCommit Repository"
        Parameters:
          - RepoName
          - RepositoryDescription

      - Label:
          default: "AWS CodeBuild Project"
        Parameters:
          - BuildProjectName
          - BuildProjectDescription

      - Label:
          default: "Build Environment"
        Parameters:          
          - ComputeType
          - BuildEnvironmentImage

      - Label:
          default: "AWS CodeDeploy Application"
        Parameters:
          - DeploymentKeyName
          - DeploymentKeyValue

Parameters:

  PipelineName:
    Description: A name for your Pipeline.
    Type: String
    Default: CodePipelineDemo
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 

  Version:
    Description: A version identifier for the Jenkins Build action.
    Type: String
    Default: 1
    MinLength: 1
    MaxLength: 9
    AllowedPattern: "[0-9A-Za-z_-]+"
    ConstraintDescription: Must be between 1 and 9 characters in length. Allowed characters are numbers, letters, underscore and dash.

  Email:
    Description: E-mail of the user who needs to be notified for pipeline state changes. The user has to confirm the subscription before receiving e-mails.
    Type: String

  VPCCidrBlock:
    Description: VPC CIDR block for the VPC to be created.
    Type: String
    Default: 172.99.0.0/16

  ImageId:
    Description: An ami for the Jenkins server.
    Type: String

  InstanceType:
    Description: Instance size of the Jenkins server.
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    Default: t2.micro
    ConstraintDescription: Must be a valid T2 type instance.
  
  KeyName:
    Description: A key-pair to connect to the Jenkins server.
    Type: AWS::EC2::KeyPair::KeyName

  CidrRange:
    Description: An IP CIDR range from which the Jenkins server could be accessed through port 8080
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: Must be a valid ip range.

  JenkinsProject:
    Description: Jenkins project name
    Type: String

  JenkinsProvider:
    Description: The provider name in the Jenkins Project for the Build stage.
    Type: String
    MinLength: 1
    MaxLength: 25
    AllowedPattern: "[0-9A-Za-z_-]+"
    ConstraintDescription: Must be between 1 and 25 characters in length. Allowed characters are numbers, letters, underscore and dash.

  RepoName:
    Description: Name of the source code repository
    Type: String
    Default: DemoCodeCommitRepository
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 
    
  RepositoryDescription:
    Description: A short description of the repository within 200 characters.
    Type: String
    MaxLength: 200
    ConstraintDescription: Must be less than 200 characters in length. 

  BuildProjectName:
    Description: Name of the build project
    Type: String
    Default: DemoCodeBuildProject
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 

  BuildProjectDescription:
    Description: A short description of the build project, within 200 characters.
    Type: String
    MaxLength: 200
    ConstraintDescription: Must be less than 200 characters in length. 

  ComputeType:
    Description: Compute environment for build
    Type: String
    Default: SMALL
    AllowedValues:
    - SMALL
    - MEDIUM
    - LARGE
    ConstraintDescription: Compute environment small, medium or large

  BuildEnvironmentImage:
    Description: Select the run-time environment for the build. Currently, only Ubuntu Linux environment available for this selection.
    Type: String
    Default: aws/codebuild/java:openjdk-8
    AllowedValues:
    - aws/codebuild/java:openjdk-8
    - aws/codebuild/java:openjdk-9
    - aws/codebuild/nodejs:10.1.0
    - aws/codebuild/nodejs:8.11.0
    - aws/codebuild/nodejs:6.3.1
    - aws/codebuild/php:5.6
    - aws/codebuild/php:7.0
    - aws/codebuild/python:3.6.5
    - aws/codebuild/python:3.5.2
    - aws/codebuild/python:3.4.5
    - aws/codebuild/python:3.3.6
    - aws/codebuild/python:2.7.12
    - aws/codebuild/ruby:2.5.1
    - aws/codebuild/ruby:2.3.1
    - aws/codebuild/ruby:2.2.5
    - aws/codebuild/golang:1.10
    - aws/codebuild/docker:17.09.0
    - aws/codebuild/android-java-8:26.1.1
    - aws/codebuild/android-java-8:24.4.1
    ConstraintDescription: Currently, only Ubuntu Linux environment available for this selection. 

  DeploymentKeyName:
    Description: The Tag's keyname of the ec2 instances on which deployment would occur.
    Type: String

  DeploymentKeyValue:
    Description: The Tag's key value of the ec2 instances on which deployment would occur.
    Type: String

################################################################################
# Define the Outputs.
################################################################################
Outputs:

  PipelineUrl:
    Description: URL to the Pipeline.
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CiCdPipeline}

  JenkinsURL:
    Description: URL to access the Jenkins server
    Value: 
      !Sub "http://${JenkinsServer.PublicDnsName}:8080"
      
  JenkinPublicIP:
    Description: Public IP address of the Jenkins Server. This can be used to connect over SSH.
    Value: !GetAtt JenkinsServer.PublicIp

  JenkinsInstanceVpcId:
    Description: VPC id of the VPC in which the Jenkins Server was launched.
    Value: !Ref VirtualPrivateCloud  

  JenkinsInstanceSubnet:
    Description: Subnet id of the subnet in which the Jenkins Server was launched.
    Value: !Ref PublicSubnet    

  SecurityGroupIds:
    Description: Security groups associated with the Jenkins instance.
    Value: 
      Fn::Join: 
        - ","
        - [ !Ref JenkinsSecurityGroup, !Ref SSHOnlySecurityGroup ]

  RepositoryCloneUrlHTTP:
    Description: The URL to use for cloning the repository over HTTPS
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp

  RepositoryCloneUrlSSH:
    Description: The URL to use for cloning the repository over SSH
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh

  PipelineArtifactStore:
    Description: The bucket name that serves as the artifact store of the pipeline.
    Value: !Ref CodePipelineArtifactStore

  SNSTopic:
    Description: The arn of the SNS topic that the pipeline sends the state change notifications.
    Value: !Ref SNSTopicForPipelineNotifications

  EventRuleId:
    Description: The CloudWatch Event Rule responsible for sending pipeline state change notifications to the SNS topic.
    Value: !Ref CloudWatchEventRule